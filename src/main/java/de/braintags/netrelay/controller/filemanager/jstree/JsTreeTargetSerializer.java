/*
 * #%L
 * NetRelay-Controller
 * %%
 * Copyright (C) 2017 Braintags GmbH
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 */
package de.braintags.netrelay.controller.filemanager.jstree;

import java.util.List;

import de.braintags.netrelay.controller.filemanager.elfinder.ElFinderConstants;
import de.braintags.netrelay.controller.filemanager.elfinder.ElFinderContext;
import de.braintags.netrelay.controller.filemanager.elfinder.io.ITarget;
import de.braintags.netrelay.controller.filemanager.elfinder.io.ITargetSerializer;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;

/**
 * 
 * 
 * @author Michael Remme
 * 
 */
public class JsTreeTargetSerializer implements ITargetSerializer<JsonObject> {
  private static final String CMD_TMB_TARGET = "?cmd=tmb&target=%s";

  public static final String ID = "id";
  public static final String TEXT = "text";
  public static final String ICON = "icon";
  public static final String CHILDREN = "children";
  public static final String LI_ATTR = "li_attr";
  public static final String A_ATTR = "a_attr";
  public static final String CLASS = "class";
  public static final String DATA_PAGE = "data-page";

  public static final String CSS_SELECTABLE_PAGE = "selectable-page";
  public static final String CSS_NO_SELECTABLE_PAGE = "no-selectable-page";

  /*
   * {
   * id : "string" // will be autogenerated if omitted
   * text : "string" // node text
   * icon : "string" // string for custom
   * state : {
   * opened : boolean // is the node open
   * disabled : boolean // is the node disabled
   * selected : boolean // is the node selected
   * },
   * children : [] // array of strings or objects
   * li_attr : {} // attributes for the generated LI node
   * a_attr : {} // attributes for the generated A node
   * }
   * 
   * Als a_attr bräuchte ich noch die beiden Infos:
   * "class": "selectable-page", // Wenn es eine auswählbare Seite ist (kein Ordner)
   * "data-page": "/sites/abc/Testpage.pconf" // relativer Seitenpfad
   * 
   */
  @Override
  public JsonObject serialize(ElFinderContext efContext, ITarget<JsonObject> target) {
    return createInfo(efContext, target, true);
  }

  private JsonObject createInfo(ElFinderContext efContext, ITarget<JsonObject> target, boolean addChildren) {
    JsonObject jo = new JsonObject();
    jo.put(ID, target.getHash());
    if (target.isRoot()) {
      jo.put(TEXT, target.getVolume().getAlias());
    } else {
      jo.put(TEXT, target.getName());
    }
    if (addChildren && target.isFolder()) {
      JsonArray array = new JsonArray();
      List<ITarget> childTargets = target.listChildren();
      for (ITarget<JsonObject> ct : childTargets) {
        array.add(createInfo(efContext, ct, false));
      }
      jo.put(CHILDREN, array);
    }
    addA_Attributes(jo, target);
    if (addChildren) {
      addFurtherAttributes(efContext, jo, target);
    }
    return jo;
  }

  private void addFurtherAttributes(ElFinderContext efContext, JsonObject info, ITarget<JsonObject> target) {
    info.put(ElFinderConstants.ELFINDER_PARAMETER_MIME, target.getMimeType());
    info.put(ElFinderConstants.ELFINDER_PARAMETER_TIMESTAMP, target.getLastModified());
    info.put(ElFinderConstants.ELFINDER_PARAMETER_SIZE, target.getSize());
    info.put(ElFinderConstants.ELFINDER_PARAMETER_READ,
        target.isReadable() ? ElFinderConstants.ELFINDER_TRUE_RESPONSE : ElFinderConstants.ELFINDER_FALSE_RESPONSE);
    info.put(ElFinderConstants.ELFINDER_PARAMETER_WRITE,
        target.isWritable() ? ElFinderConstants.ELFINDER_TRUE_RESPONSE : ElFinderConstants.ELFINDER_FALSE_RESPONSE);
    info.put(ElFinderConstants.ELFINDER_PARAMETER_LOCKED,
        target.isLocked() ? ElFinderConstants.ELFINDER_TRUE_RESPONSE : ElFinderConstants.ELFINDER_FALSE_RESPONSE);

    if (target.getMimeType() != null && target.getMimeType().startsWith("image")) {
      String uri = efContext.getRoutingContext().request().absoluteURI()
          + String.format(CMD_TMB_TARGET, target.getHash());
      info.put(ElFinderConstants.ELFINDER_PARAMETER_THUMBNAIL, uri);
    }

    if (target.isFolder()) {
      info.put(ElFinderConstants.ELFINDER_PARAMETER_HAS_DIR, target.hasChildFolder()
          ? ElFinderConstants.ELFINDER_TRUE_RESPONSE : ElFinderConstants.ELFINDER_FALSE_RESPONSE);
    }
  }

  private void addA_Attributes(JsonObject jo, ITarget<JsonObject> target) {
    String path = target.getPath().toString();
    jo.put(A_ATTR, new JsonObject().put(CLASS, target.isFolder() ? CSS_NO_SELECTABLE_PAGE : CSS_SELECTABLE_PAGE)
        .put(DATA_PAGE, target.getRelativePath()));
  }

  /*
   * (non-Javadoc)
   * 
   * @see
   * de.braintags.netrelay.controller.filemanager.elfinder.io.ITargetSerializer#serializeoptions(de.braintags.netrelay.
   * controller.filemanager.elfinder.ElFinderContext, de.braintags.netrelay.controller.filemanager.elfinder.io.ITarget)
   */
  @Override
  public JsonObject serializeoptions(ElFinderContext efContext, ITarget<JsonObject> target) {
    JsonObject options = new JsonObject();
    options.put(ElFinderConstants.ELFINDER_PARAMETER_PATH, target.getName());
    options.put(ElFinderConstants.ELFINDER_PARAMETER_COMMAND_DISABLED, new JsonArray());
    options.put(ElFinderConstants.ELFINDER_PARAMETER_FILE_SEPARATOR,
        ElFinderConstants.ELFINDER_PARAMETER_FILE_SEPARATOR);
    options.put(ElFinderConstants.ELFINDER_PARAMETER_OVERWRITE_FILE, ElFinderConstants.ELFINDER_TRUE_RESPONSE);
    return options;
  }

}
